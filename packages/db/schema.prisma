  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  model User {
    id                 Int                  @id @default(autoincrement())
    email              String?              @unique
    name               String?
    number             String?              @unique
    password           String?
    createdAt          DateTime             @default(now())
    color              Color                @default(CYAN)
    isReady            Boolean              @default(false)
    authProvider       AuthType?
    OnRampTransaction  OnRampTransaction[]
    OffRampTransaction OffRampTransaction[]
    Balance            Balance[]
    SentTransfers      P2PTransfer[]        @relation(name: "FromUserRelation")
    ReceivedTransfers  P2PTransfer[]        @relation(name: "ToUserRelation")
    Contacts           Contact[]            @relation(name: "UserContacts")
    ContactOf          Contact[]            @relation(name: "ContactOfUser")
  }

  model Merchant {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    name      String?
    auth_type AuthType?
  }

  model OnRampTransaction {
    id        Int          @id @default(autoincrement())
    status    RampStatus
    token     String?       @unique
    provider  String
    amount    Int
    timestamp DateTime     @default(now())
    userId    Int
    User      User         @relation(fields: [userId], references: [id])
  }

  model OffRampTransaction {
    id        Int          @id @default(autoincrement())
    status    RampStatus
    token     String?       @unique
    provider  String
    amount    Int
    timestamp DateTime     @default(now())
    userId    Int
    User      User         @relation(fields: [userId], references: [id])
  }

  model Balance {
    id             Int      @id @default(autoincrement())
    userId         Int
    transactionAmt Int
    totalBalance   Int
    locked         Int
    timestamp      DateTime @default(now())
    user           User     @relation(fields: [userId], references: [id])
  }

  model P2PTransfer {
    id         Int      @id @default(autoincrement())
    amount     Int
    timestamp  DateTime @default(now())
    fromUserId Int
    toUserId   Int
    FromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
    ToUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  }

  model Contact {
    id        Int      @id @default(autoincrement())
    userId    Int
    contactId Int
    createdAt DateTime @default(now())
    User      User     @relation("UserContacts", fields: [userId], references: [id])
    Contact   User     @relation("ContactOfUser", fields: [contactId], references: [id])

    @@unique([userId, contactId])
  }

  enum AuthType {
    Credentials
    Google
    Github
  }

  enum RampStatus {
    Pending
    Success
    Failure
  }

  enum Color {
    GREEN
    BLUE
    YELLOW
    PURPLE
    CYAN
  }
